"use client";

import { useState, useEffect, useRef } from "react";
import { format } from "date-fns";

const SearchForm = () => {
  const [whereToValue, setWhereToValue] = useState("");
  const [timeValue, setTimeValue] = useState("");
  const [destinationValue, setDestinationValue] = useState("");
  const [seatsValue, setSeatsValue] = useState("");
  const [whereToSuggestions, setWhereToSuggestions] = useState([]);
  const [destinationSuggestions, setDestinationSuggestions] = useState([]);
  const whereToRef = useRef(null);
  const destinationRef = useRef(null);

  const fetchSuggestions = async (input, setSuggestions) => {
    if (input.length > 2) {
      try {
        const response = await fetch(
          `https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(
            input
          )}`
        );
        const data = await response.json();
        setSuggestions(data.slice(0, 5));
      } catch (error) {
        console.error("Error fetching suggestions:", error);
      }
    } else {
      setSuggestions([]);
    }
  };

  useEffect(() => {
    const handleClickOutside = (event) => {
      if (whereToRef.current && !whereToRef.current.contains(event.target)) {
        setWhereToSuggestions([]);
      }
      if (
        destinationRef.current &&
        !destinationRef.current.contains(event.target)
      ) {
        setDestinationSuggestions([]);
      }
    };

    document.addEventListener("mousedown", handleClickOutside);
    return () => {
      document.removeEventListener("mousedown", handleClickOutside);
    };
  }, []);

  const handleSubmit = (e) => {
    e.preventDefault();
    console.log("Form submitted", {
      whereToValue,
      timeValue,
      destinationValue,
      seatsValue,
    });
  };

  const truncateString = (str, num) => {
    if (str.length <= num) {
      return str;
    }
    return str.slice(0, num) + "...";
  };

  return (
    <form
      onSubmit={handleSubmit}
      className="flex items-center justify-between w-full h-full space-x-4 px-4"
    >
      <div
        ref={whereToRef}
        className="relative flex items-center justify-center bg-white rounded-full px-4 py-2 shadow-md flex-grow"
      >
        <input
          type="text"
          placeholder="Where to?"
          className="text-gray-700 focus:outline-none w-full"
          value={whereToValue}
          onChange={(e) => {
            setWhereToValue(e.target.value);
            fetchSuggestions(e.target.value, setWhereToSuggestions);
          }}
        />
        {whereToSuggestions.length > 0 && (
          <ul className="absolute z-10 w-full bg-white mt-1 top-full left-0 rounded-2xl shadow-lg max-h-60 overflow-auto">
            {whereToSuggestions.map((suggestion, index) => (
              <li
                key={index}
                className="px-4 py-2 hover:bg-gray-100 cursor-pointer"
                onClick={() => {
                  setWhereToValue(suggestion.display_name);
                  setWhereToSuggestions([]);
                }}
              >
                {truncateString(suggestion.display_name, 40)}
              </li>
            ))}
          </ul>
        )}
      </div>
      <div className="flex items-center justify-center bg-white rounded-full px-4 py-2 shadow-md flex-grow">
        <input
          type="datetime-local"
          className="text-gray-700 focus:outline-none w-full"
          value={timeValue}
          onChange={(e) => setTimeValue(e.target.value)}
        />
      </div>
      <div
        ref={destinationRef}
        className="relative flex items-center justify-center bg-white rounded-full px-4 py-2 shadow-md flex-grow"
      >
        <input
          type="text"
          placeholder="Select destination"
          className="text-gray-700 focus:outline-none w-full"
          value={destinationValue}
          onChange={(e) => {
            setDestinationValue(e.target.value);
            fetchSuggestions(e.target.value, setDestinationSuggestions);
          }}
        />
        {destinationSuggestions.length > 0 && (
          <ul className="absolute z-10 w-full bg-white mt-1 top-full left-0 rounded-2xl shadow-lg max-h-60 overflow-auto">
            {destinationSuggestions.map((suggestion, index) => (
              <li
                key={index}
                className="px-4 py-2 hover:bg-gray-100 cursor-pointer"
                onClick={() => {
                  setDestinationValue(suggestion.display_name);
                  setDestinationSuggestions([]);
                }}
              >
                {truncateString(suggestion.display_name, 40)}
              </li>
            ))}
          </ul>
        )}
      </div>
      <div className="flex items-center justify-center bg-white rounded-full px-4 py-2 shadow-md flex-grow">
        <input
          type="number"
          placeholder="Number of seats"
          className="text-gray-700 focus:outline-none w-full"
          value={seatsValue}
          onChange={(e) => setSeatsValue(e.target.value)}
        />
      </div>
      <button
        type="submit"
        className="bg-custom-orange text-white px-4 py-2 rounded-full shadow-md"
      >
        Search
      </button>
    </form>
  );
};

export default SearchForm;
